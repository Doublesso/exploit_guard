defmodule ExploitGuard.Application do
  @moduledoc false

  use Application
  require Logger

  @impl true
  def start(_type, _args) do
    mode = Application.get_env(:exploit_guard, :mode)
    :persistent_term.put(:mode, mode)

    children =
      cond do
        mode == :block ->
          Logger.info("[Exploit Guard] Running in block mode.")
          [ExploitGuard.Watcher]

        mode == :monitor ->
          Logger.info("[Exploit Guard] Running in monitor mode.")
          [ExploitGuard.Watcher]

        is_nil(mode) ->
          Logger.info("[Exploit Guard] No configuration found, tracing disabled. Valid options are :monitor or :block")
          []

        true ->
          Logger.info("[Exploit Guard] Bad configuration, tracing disabled. Valid options are :monitor or :block")
          []
      end

    opts = [strategy: :one_for_one, name: ExploitGuard.Supervisor]
    Supervisor.start_link(children, opts)
  end
end
