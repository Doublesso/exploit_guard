defmodule ExploitGuard.ExploitHandler do
  @moduledoc """
  Behavior to allow external applications to plug into ExploitGuard and
  programmatically handle exploit calls.
  """

  alias ExploitGuard.TaskSupervisor, as: EGTaskSupervisor
  alias Task.Supervisor, as: TaskSupervisor

  @doc """
  Callback that is called when an exploit is triggered during runtime

  Params:

  * `:exploit` - the raw erlang term of the exploit (required)
  """
  @callback call(params :: map()) :: :ok

  @doc false
  def call(handler_module, exploit_term) do
    # safely call the handler in its own process to avoid crashing the watcher
    TaskSupervisor.start_child(EGTaskSupervisor, fn ->
      handler_module.call(exploit_term)
    end)
  end
end
